{"version":3,"file":"index.js","sources":["../../../../typhonjs-node-utils/dynamic-array-reducer/dist/DynArrayReducer.js"],"sourcesContent":["/**\r\n * Provides the storage and sequencing of managed filters. Each filter added may be a bespoke function or a\r\n * {@link FilterData} object containing an `id`, `filter`, and `weight` attributes; `filter` is the only required\r\n * attribute.\r\n *\r\n * The `id` attribute can be anything that creates a unique ID for the filter; recommended strings or numbers. This\r\n * allows filters to be removed by ID easily.\r\n *\r\n * The `weight` attribute is a number between 0 and 1 inclusive that allows filters to be added in a\r\n * predictable order which is especially handy if they are manipulated at runtime. A lower weighted filter always runs\r\n * before a higher weighted filter. For speed and efficiency always set the heavier / more inclusive filter with a\r\n * lower weight; an example of this is a keyword / name that will filter out many entries making any further filtering\r\n * faster. If no weight is specified the default of '1' is assigned and it is appended to the end of the filters list.\r\n *\r\n * This class forms the public API which is accessible from the `.filters` getter in the main DynArrayReducer instance.\r\n * ```\r\n * const dynArray = new DynArrayReducer([...]);\r\n * dynArray.filters.add(...);\r\n * dynArray.filters.clear();\r\n * dynArray.filters.length;\r\n * dynArray.filters.remove(...);\r\n * dynArray.filters.removeBy(...);\r\n * dynArray.filters.removeById(...);\r\n * ```\r\n *\r\n * @template T\r\n */\r\nclass AdapterFilters\r\n{\r\n   #filtersAdapter;\r\n   #indexUpdate;\r\n   #mapUnsubscribe = new Map();\r\n\r\n   /**\r\n    * @param {Function} indexUpdate - update function for the indexer.\r\n    *\r\n    * @returns {[AdapterFilters<T>, {filters: FilterData<T>[]}]} Returns this and internal storage for filter adapters.\r\n    */\r\n   constructor(indexUpdate)\r\n   {\r\n      this.#indexUpdate = indexUpdate;\r\n\r\n      this.#filtersAdapter = { filters: [] };\r\n\r\n      Object.seal(this);\r\n\r\n      return [this, this.#filtersAdapter];\r\n   }\r\n\r\n   /**\r\n    * @returns {number} Returns the length of the\r\n    */\r\n   get length() { return this.#filtersAdapter.filters.length; }\r\n\r\n   /**\r\n    * Provides an iterator for filters.\r\n    *\r\n    * @returns {Generator<number|undefined, FilterData<T>, *>} Generator / iterator of filters.\r\n    * @yields {FilterData<T>}\r\n    */\r\n   *[Symbol.iterator]()\r\n   {\r\n      if (this.#filtersAdapter.filters.length === 0) { return; }\r\n\r\n      for (const entry of this.#filtersAdapter.filters)\r\n      {\r\n         yield { ...entry };\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @param {...(FilterFn<T>|FilterData<T>)}   filters -\r\n    */\r\n   add(...filters)\r\n   {\r\n      /**\r\n       * Tracks the number of filters added that have subscriber functionality.\r\n       *\r\n       * @type {number}\r\n       */\r\n      let subscribeCount = 0;\r\n\r\n      for (const filter of filters)\r\n      {\r\n         const filterType = typeof filter;\r\n\r\n         if (filterType !== 'function' && filterType !== 'object' || filter === null)\r\n         {\r\n            throw new TypeError(`DynArrayReducer error: 'filter' is not a function or object.`);\r\n         }\r\n\r\n         let data = void 0;\r\n         let subscribeFn = void 0;\r\n\r\n         switch (filterType)\r\n         {\r\n            case 'function':\r\n               data = {\r\n                  id: void 0,\r\n                  filter,\r\n                  weight: 1\r\n               };\r\n\r\n               subscribeFn = filter.subscribe;\r\n               break;\r\n\r\n            case 'object':\r\n               if (typeof filter.filter !== 'function')\r\n               {\r\n                  throw new TypeError(`DynArrayReducer error: 'filter' attribute is not a function.`);\r\n               }\r\n\r\n               if (filter.weight !== void 0 && typeof filter.weight !== 'number' ||\r\n                (filter.weight < 0 || filter.weight > 1))\r\n               {\r\n                  throw new TypeError(\r\n                   `DynArrayReducer error: 'weight' attribute is not a number between '0 - 1' inclusive.`);\r\n               }\r\n\r\n               data = {\r\n                  id: filter.id !== void 0 ? filter.id : void 0,\r\n                  filter: filter.filter,\r\n                  weight: filter.weight || 1\r\n               };\r\n\r\n               subscribeFn = filter.filter.subscribe ?? filter.subscribe;\r\n               break;\r\n         }\r\n\r\n         // Find the index to insert where data.weight is less than existing values weight.\r\n         const index = this.#filtersAdapter.filters.findIndex((value) =>\r\n         {\r\n            return data.weight < value.weight;\r\n         });\r\n\r\n         // If an index was found insert at that location.\r\n         if (index >= 0)\r\n         {\r\n            this.#filtersAdapter.filters.splice(index, 0, data);\r\n         }\r\n         else // push to end of filters.\r\n         {\r\n            this.#filtersAdapter.filters.push(data);\r\n         }\r\n\r\n         if (typeof subscribeFn === 'function')\r\n         {\r\n            const unsubscribe = subscribeFn(this.#indexUpdate);\r\n\r\n            // Ensure that unsubscribe is a function.\r\n            if (typeof unsubscribe !== 'function')\r\n            {\r\n               throw new TypeError(\r\n                'DynArrayReducer error: Filter has subscribe function, but no unsubscribe function is returned.');\r\n            }\r\n\r\n            // Ensure that the same filter is not subscribed to multiple times.\r\n            if (this.#mapUnsubscribe.has(data.filter))\r\n            {\r\n               throw new Error(\r\n                'DynArrayReducer error: Filter added already has an unsubscribe function registered.');\r\n            }\r\n\r\n            this.#mapUnsubscribe.set(data.filter, unsubscribe);\r\n            subscribeCount++;\r\n         }\r\n      }\r\n\r\n      // Filters with subscriber functionality are assumed to immediately invoke the `subscribe` callback. If the\r\n      // subscriber count is less than the amount of filters added then automatically trigger an index update manually.\r\n      if (subscribeCount < filters.length) { this.#indexUpdate(); }\r\n   }\r\n\r\n   clear()\r\n   {\r\n      this.#filtersAdapter.filters.length = 0;\r\n\r\n      // Unsubscribe from all filters with subscription support.\r\n      for (const unsubscribe of this.#mapUnsubscribe.values())\r\n      {\r\n         unsubscribe();\r\n      }\r\n\r\n      this.#mapUnsubscribe.clear();\r\n\r\n      this.#indexUpdate();\r\n   }\r\n\r\n   /**\r\n    * @param {...(FilterFn<T>|FilterData<T>)}   filters -\r\n    */\r\n   remove(...filters)\r\n   {\r\n      const length = this.#filtersAdapter.filters.length;\r\n\r\n      if (length === 0) { return; }\r\n\r\n      for (const data of filters)\r\n      {\r\n         // Handle the case that the filter may either be a function or a filter entry / object.\r\n         const actualFilter = typeof data === 'function' ? data : data !== null && typeof data === 'object' ?\r\n          data.filter : void 0;\r\n\r\n         if (!actualFilter) { continue; }\r\n\r\n         for (let cntr = this.#filtersAdapter.filters.length; --cntr >= 0;)\r\n         {\r\n            if (this.#filtersAdapter.filters[cntr].filter === actualFilter)\r\n            {\r\n               this.#filtersAdapter.filters.splice(cntr, 1);\r\n\r\n               // Invoke any unsubscribe function for given filter then remove from tracking.\r\n               let unsubscribe = void 0;\r\n               if (typeof (unsubscribe = this.#mapUnsubscribe.get(actualFilter)) === 'function')\r\n               {\r\n                  unsubscribe();\r\n                  this.#mapUnsubscribe.delete(actualFilter);\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      // Update the index a filter was removed.\r\n      if (length !== this.#filtersAdapter.filters.length) { this.#indexUpdate(); }\r\n   }\r\n\r\n   /**\r\n    * Remove filters by the provided callback. The callback takes 3 parameters: `id`, `filter`, and `weight`.\r\n    * Any truthy value returned will remove that filter.\r\n    *\r\n    * @param {function(*, FilterFn<T>, number): boolean} callback - Callback function to evaluate each filter entry.\r\n    */\r\n   removeBy(callback)\r\n   {\r\n      const length = this.#filtersAdapter.filters.length;\r\n\r\n      if (length === 0) { return; }\r\n\r\n      if (typeof callback !== 'function')\r\n      {\r\n         throw new TypeError(`DynArrayReducer error: 'callback' is not a function.`);\r\n      }\r\n\r\n      this.#filtersAdapter.filters = this.#filtersAdapter.filters.filter((data) =>\r\n      {\r\n         const remove = callback.call(callback, { ...data });\r\n\r\n         if (remove)\r\n         {\r\n            let unsubscribe;\r\n            if (typeof (unsubscribe = this.#mapUnsubscribe.get(data.filter)) === 'function')\r\n            {\r\n               unsubscribe();\r\n               this.#mapUnsubscribe.delete(data.filter);\r\n            }\r\n         }\r\n\r\n         // Reverse remove boolean to properly filter / remove this filter.\r\n         return !remove;\r\n      });\r\n\r\n      if (length !== this.#filtersAdapter.filters.length) { this.#indexUpdate(); }\r\n   }\r\n\r\n   removeById(...ids)\r\n   {\r\n      const length = this.#filtersAdapter.filters.length;\r\n\r\n      if (length === 0) { return; }\r\n\r\n      this.#filtersAdapter.filters = this.#filtersAdapter.filters.filter((data) =>\r\n      {\r\n         let remove = false;\r\n\r\n         for (const id of ids) { remove |= data.id === id; }\r\n\r\n         // If not keeping invoke any unsubscribe function for given filter then remove from tracking.\r\n         if (remove)\r\n         {\r\n            let unsubscribe;\r\n            if (typeof (unsubscribe = this.#mapUnsubscribe.get(data.filter)) === 'function')\r\n            {\r\n               unsubscribe();\r\n               this.#mapUnsubscribe.delete(data.filter);\r\n            }\r\n         }\r\n\r\n         return !remove; // Swap here to actually remove the item via array filter method.\r\n      });\r\n\r\n      if (length !== this.#filtersAdapter.filters.length) { this.#indexUpdate(); }\r\n   }\r\n}\n\n/**\r\n * @template T\r\n */\r\nclass AdapterSort\r\n{\r\n   #sortAdapter;\r\n   #indexUpdate;\r\n   #unsubscribe;\r\n\r\n   /**\r\n    * @param {Function} indexUpdate - Function to update indexer.\r\n    *\r\n    * @returns {[AdapterSort<T>, {compareFn: CompareFn<T>}]} This and the internal sort adapter data.\r\n    */\r\n   constructor(indexUpdate)\r\n   {\r\n      this.#indexUpdate = indexUpdate;\r\n\r\n      this.#sortAdapter = { compareFn: null };\r\n\r\n      Object.seal(this);\r\n\r\n      return [this, this.#sortAdapter];\r\n   }\r\n\r\n   /**\r\n    * @param {CompareFn<T>|SortData<T>}  data -\r\n    *\r\n    * A callback function that compares two values. Return > 0 to sort b before a;\r\n    * < 0 to sort a before b; or 0 to keep original order of a & b.\r\n    *\r\n    * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#parameters\r\n    */\r\n   set(data)\r\n   {\r\n      if (typeof this.#unsubscribe === 'function')\r\n      {\r\n         this.#unsubscribe();\r\n         this.#unsubscribe = void 0;\r\n      }\r\n\r\n      let compareFn = void 0;\r\n      let subscribeFn = void 0;\r\n\r\n      switch (typeof data)\r\n      {\r\n         case 'function':\r\n            compareFn = data;\r\n            subscribeFn = data.subscribe;\r\n            break;\r\n\r\n         case 'object':\r\n            // Early out if data is null / noop.\r\n            if (data === null) { break; }\r\n\r\n            if (typeof data.compare !== 'function')\r\n            {\r\n               throw new TypeError(`DynArrayReducer error: 'compare' attribute is not a function.`);\r\n            }\r\n\r\n            compareFn = data.compare;\r\n            subscribeFn = data.compare.subscribe ?? data.subscribe;\r\n            break;\r\n      }\r\n\r\n      if (typeof compareFn === 'function')\r\n      {\r\n         this.#sortAdapter.compareFn = compareFn;\r\n      }\r\n      else\r\n      {\r\n         const oldCompareFn = this.#sortAdapter.compareFn;\r\n         this.#sortAdapter.compareFn = null;\r\n\r\n         // Update index if the old compare function exists.\r\n         if (typeof oldCompareFn === 'function') { this.#indexUpdate(); }\r\n         return;\r\n      }\r\n\r\n      if (typeof subscribeFn === 'function')\r\n      {\r\n         this.#unsubscribe = subscribeFn(this.#indexUpdate);\r\n\r\n         // Ensure that unsubscribe is a function.\r\n         if (typeof this.#unsubscribe !== 'function')\r\n         {\r\n            throw new Error(\r\n             `DynArrayReducer error: sort has 'subscribe' function, but no 'unsubscribe' function is returned.`);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         // A sort function with subscriber functionality are assumed to immediately invoke the `subscribe` callback.\r\n         // Only manually update the index if there is no subscriber functionality.\r\n         this.#indexUpdate();\r\n      }\r\n   }\r\n\r\n   reset()\r\n   {\r\n      const oldCompareFn = this.#sortAdapter.compareFn;\r\n\r\n      this.#sortAdapter.compareFn = null;\r\n\r\n      if (typeof this.#unsubscribe === 'function')\r\n      {\r\n         this.#unsubscribe();\r\n         this.#unsubscribe = void 0;\r\n      }\r\n\r\n      // Only update index if an old compare function is set.\r\n      if (typeof oldCompareFn === 'function') { this.#indexUpdate(); }\r\n   }\r\n}\n\nclass Indexer\r\n{\r\n   constructor(hostItems, hostUpdate)\r\n   {\r\n      this.hostItems = hostItems;\r\n      this.hostUpdate = hostUpdate;\r\n\r\n      const indexAdapter = { index: null, hash: null };\r\n\r\n      const publicAPI = {\r\n         update: this.update.bind(this),\r\n\r\n         /**\r\n          * Provides an iterator over the index array.\r\n          *\r\n          * @returns {Generator<any, void, *>} Iterator.\r\n          * @yields\r\n          */\r\n         [Symbol.iterator]: function *()\r\n         {\r\n            if (!indexAdapter.index) { return; }\r\n\r\n            for (const index of indexAdapter.index) { yield index; }\r\n         }\r\n      };\r\n\r\n      // Define a getter on the public API to get the length / count of index array.\r\n      Object.defineProperties(publicAPI, {\r\n         hash: { get: () => indexAdapter.hash },\r\n         isActive: { get: () => this.isActive() },\r\n         length: { get: () => Array.isArray(indexAdapter.index) ? indexAdapter.index.length : 0 }\r\n      });\r\n\r\n      Object.freeze(publicAPI);\r\n\r\n      indexAdapter.publicAPI = publicAPI;\r\n\r\n      this.indexAdapter = indexAdapter;\r\n\r\n      return [this, indexAdapter];\r\n   }\r\n\r\n   /**\r\n    * Calculates a new hash value for the new index array if any. If the new index array is null then the hash value\r\n    * is set to null. Set calculated new hash value to the index adapter hash value.\r\n    *\r\n    * After hash generation compare old and new hash values and perform an update if they are different. If they are\r\n    * equal check for array equality between the old and new index array and perform an update if they are not equal.\r\n    *\r\n    * @param {number[]}    oldIndex - Old index array.\r\n    *\r\n    * @param {number|null} oldHash - Old index hash value.\r\n    */\r\n   calcHashUpdate(oldIndex, oldHash)\r\n   {\r\n      let newHash = null;\r\n      const newIndex = this.indexAdapter.index;\r\n\r\n      if (newIndex)\r\n      {\r\n         for (let cntr = newIndex.length; --cntr >= 0;)\r\n         {\r\n            newHash ^= newIndex[cntr] + 0x9e3779b9 + (newHash << 6) + (newHash >> 2);\r\n         }\r\n      }\r\n\r\n      this.indexAdapter.hash = newHash;\r\n\r\n      if (oldHash === newHash ? !s_ARRAY_EQUALS(oldIndex, newIndex) : true) { this.hostUpdate(); }\r\n   }\r\n\r\n   initAdapters(filtersAdapter, sortAdapter)\r\n   {\r\n      this.filtersAdapter = filtersAdapter;\r\n      this.sortAdapter = sortAdapter;\r\n\r\n      this.sortFn = (a, b) =>\r\n      {\r\n         return this.sortAdapter.compareFn(this.hostItems[a], this.hostItems[b]);\r\n      };\r\n   }\r\n\r\n   isActive()\r\n   {\r\n      return this.filtersAdapter.filters.length > 0 || this.sortAdapter.compareFn !== null;\r\n   }\r\n\r\n   /**\r\n    * Provides the custom filter / reduce step that is ~25-40% faster than implementing with `Array.reduce`.\r\n    *\r\n    * Note: Other loop unrolling techniques like Duff's Device gave a slight faster lower bound on large data sets,\r\n    * but the maintenance factor is not worth the extra complication.\r\n    *\r\n    * @returns {number[]} New filtered index array.\r\n    */\r\n   reduceImpl()\r\n   {\r\n      const data = [];\r\n\r\n      const filters = this.filtersAdapter.filters;\r\n\r\n      let include = true;\r\n\r\n      for (let cntr = 0, length = this.hostItems.length; cntr < length; cntr++)\r\n      {\r\n         include = true;\r\n\r\n         for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++)\r\n         {\r\n            if (!filters[filCntr].filter(this.hostItems[cntr]))\r\n            {\r\n               include = false;\r\n               break;\r\n            }\r\n         }\r\n\r\n         if (include) { data.push(cntr); }\r\n      }\r\n\r\n      return data;\r\n   }\r\n\r\n   update()\r\n   {\r\n      const oldIndex = this.indexAdapter.index;\r\n      const oldHash = this.indexAdapter.hash;\r\n\r\n      // Clear index if there are no filters and no sort function or the index length doesn't match the item length.\r\n      if ((this.filtersAdapter.filters.length === 0 && !this.sortAdapter.compareFn) ||\r\n       (this.indexAdapter.index && this.hostItems.length !== this.indexAdapter.index.length))\r\n      {\r\n         this.indexAdapter.index = null;\r\n      }\r\n\r\n      // If there are filters build new index.\r\n      if (this.filtersAdapter.filters.length > 0) { this.indexAdapter.index = this.reduceImpl(); }\r\n\r\n      if (this.sortAdapter.compareFn)\r\n      {\r\n         // If there is no index then create one with keys matching host item length.\r\n         if (!this.indexAdapter.index) { this.indexAdapter.index = [...Array(this.hostItems.length).keys()]; }\r\n\r\n         this.indexAdapter.index.sort(this.sortFn);\r\n      }\r\n\r\n      this.calcHashUpdate(oldIndex, oldHash);\r\n   }\r\n}\r\n\r\n/**\r\n * Checks for array equality between two arrays of numbers.\r\n *\r\n * @param {number[]} a - Array A\r\n *\r\n * @param {number[]} b - Array B\r\n *\r\n * @returns {boolean} Arrays equal\r\n */\r\nfunction s_ARRAY_EQUALS(a, b)\r\n{\r\n   if (a === b) { return true; }\r\n   if (a === null || b === null) { return false; }\r\n\r\n   /* c8 ignore next */\r\n   if (a.length !== b.length) { return false; }\r\n\r\n   for (let cntr = a.length; --cntr >= 0;)\r\n   {\r\n      /* c8 ignore next */\r\n      if (a[cntr] !== b[cntr]) { return false; }\r\n   }\r\n\r\n   return true;\r\n}\n\n/**\r\n * Provides a managed array with non-destructive reducing / filtering / sorting capabilities with subscription /\r\n * Svelte store support.\r\n *\r\n * @template T\r\n */\r\nclass DynArrayReducer\r\n{\r\n   #items;\r\n\r\n   #index;\r\n   #indexAdapter;\r\n\r\n   /**\r\n    * @type {AdapterFilters<T>}\r\n    */\r\n   #filters;\r\n\r\n   /**\r\n    * @type {{filters: FilterFn<T>[]}}\r\n    */\r\n   #filtersAdapter;\r\n\r\n   /**\r\n    * @type {AdapterSort<T>}\r\n    */\r\n   #sort;\r\n\r\n   /**\r\n    * @type {{compareFn: CompareFn<T>}}\r\n    */\r\n   #sortAdapter;\r\n\r\n   #subscriptions = [];\r\n\r\n   /**\r\n    * Initializes DynArrayReducer. Any iterable is supported for initial data. Take note that if `data` is an array it\r\n    * will be used as the host array and not copied. All non-array iterables otherwise create a new array / copy.\r\n    *\r\n    * @param {Iterable<T>|DynData<T>}   data - Data iterable to store if array or copy otherwise.\r\n    */\r\n   constructor(data = void 0)\r\n   {\r\n      let dataIterable = void 0;\r\n      let filters = void 0;\r\n      let sort = void 0;\r\n\r\n      // Potentially working with DynData.\r\n      if (!s_IS_ITERABLE(data) && typeof data === 'object')\r\n      {\r\n         if (!s_IS_ITERABLE(data.data))\r\n         {\r\n            throw new TypeError(`DynArrayReducer error (DynData): 'data' attribute is not iterable.`);\r\n         }\r\n\r\n         dataIterable = data.data;\r\n\r\n         if (data.filters !== void 0)\r\n         {\r\n            if (s_IS_ITERABLE(data.filters))\r\n            {\r\n               filters = data.filters;\r\n            }\r\n            else\r\n            {\r\n               throw new TypeError(`DynArrayReducer error (DynData): 'filters' attribute is not iterable.`);\r\n            }\r\n         }\r\n\r\n         if (data.sort !== void 0)\r\n         {\r\n            if (typeof data.sort === 'function')\r\n            {\r\n               sort = data.sort;\r\n            }\r\n            else\r\n            {\r\n               throw new TypeError(`DynArrayReducer error (DynData): 'sort' attribute is not a function.`);\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         if (!s_IS_ITERABLE(data)) { throw new TypeError(`DynArrayReducer error: 'data' is not iterable.`); }\r\n\r\n         dataIterable = data;\r\n      }\r\n\r\n      // In the case of the main data being an array directly use the array otherwise create a copy.\r\n      this.#items = Array.isArray(dataIterable) ? dataIterable : [...dataIterable];\r\n\r\n      [this.#index, this.#indexAdapter] = new Indexer(this.#items, this.#notify.bind(this));\r\n\r\n      [this.#filters, this.#filtersAdapter] = new AdapterFilters(this.#indexAdapter.publicAPI.update);\r\n      [this.#sort, this.#sortAdapter] = new AdapterSort(this.#indexAdapter.publicAPI.update);\r\n\r\n      this.#index.initAdapters(this.#filtersAdapter, this.#sortAdapter);\r\n\r\n      // Add any filters and sort function defined by DynData.\r\n      if (filters) { this.filters.add(...filters); }\r\n      if (sort) { this.sort.set(sort); }\r\n   }\r\n\r\n   /**\r\n    * @returns {AdapterFilters<T>} The filters adapter.\r\n    */\r\n   get filters() { return this.#filters; }\r\n\r\n   /**\r\n    * Returns the Indexer public API.\r\n    *\r\n    * @returns {IndexerAPI & Iterable<number>} Indexer API - is also iterable.\r\n    */\r\n   get index() { return this.#indexAdapter.publicAPI; }\r\n\r\n   /**\r\n    * Gets the main data / items length.\r\n    *\r\n    * @returns {number} Main data / items length.\r\n    */\r\n   get length() { return this.#items.length; }\r\n\r\n   /**\r\n    * @returns {AdapterSort<T>} The sort adapter.\r\n    */\r\n   get sort() { return this.#sort; }\r\n\r\n   /**\r\n    *\r\n    * @param {function(DynArrayReducer<T>): void} handler - Callback function that is invoked on update / changes.\r\n    *                                                       Receives `this` reference.\r\n    *\r\n    * @returns {(function(): void)} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler); // add handler to the array of subscribers\r\n\r\n      handler(this);                     // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    *\r\n    */\r\n   #notify()\r\n   {\r\n      // Subscriptions are stored locally as on the browser Babel is still used for private class fields / Babel\r\n      // support until 2023. IE not doing this will require several extra method calls otherwise.\r\n      const subscriptions = this.#subscriptions;\r\n      for (let cntr = 0; cntr < subscriptions.length; cntr++) { subscriptions[cntr](this); }\r\n   }\r\n\r\n   /**\r\n    * Provides an iterator for data stored in DynArrayReducer.\r\n    *\r\n    * @returns {Generator<*, T, *>} Generator / iterator of all data.\r\n    * @yields {T}\r\n    */\r\n   *[Symbol.iterator]()\r\n   {\r\n      const items = this.#items;\r\n\r\n      if (items.length === 0) { return; }\r\n\r\n      if (this.#index.isActive())\r\n      {\r\n         for (const entry of this.index) { yield items[entry]; }\r\n      }\r\n      else\r\n      {\r\n         for (const entry of items) { yield entry; }\r\n      }\r\n   }\r\n}\r\n\r\n/**\r\n * Provides a utility method to determine if the given data is iterable / implements iterator protocol.\r\n *\r\n * @param {*}  data - Data to verify as iterable.\r\n *\r\n * @returns {boolean} Is data iterable.\r\n */\r\nfunction s_IS_ITERABLE(data)\r\n{\r\n   return data !== null && data !== void 0 && typeof data === 'object' && typeof data[Symbol.iterator] === 'function';\r\n}\n\nexport { DynArrayReducer };\n"],"names":[],"mappings":"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"}